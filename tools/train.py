import argparse
import cv2
import numpy as np
import sys
from keras.preprocessing.image import ImageDataGenerator
from deepnet import vgg_like_model
from keras.utils import np_utils
from keras.datasets import cifar10

def load_data_from_file(file_path, resize=(64, 64)):
    X, Y= [], []
    fp = open(file_path, 'r')
    for line in fp.readlines():
        img_path = line.strip().split()[0]
        x = cv2.imread(img_path)
        # print img_path
        # print np.shape(x)
        x = cv2.resize(x, resize)
        y = np.array([int(line.strip().split()[1])])
        x = x.transpose(2,0,1)
        X.append(x)
        Y.append(y)
    fp.close()
    return np.array(X), np.array(Y)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-train", help="train file", type=str)
    parser.add_argument("-val", help="val  file", type=str)
    parser.add_argument("-n", help="nb_classes", type=int)
    parser.add_argument("-w", help="weight h5 file", type=str)

    args = parser.parse_args()
    
    X_train, y_train = load_data_from_file(args.train)
    X_test, y_test = load_data_from_file(args.val)
    nb_classes = args.n

    X_train = X_train.astype('float32')
    X_test = X_test.astype('float32')
    X_train /= 255
    X_test /= 255

    print('X_train shape:', X_train.shape)
    print('y_train shape:', y_train.shape) 
    print('X_train shape:', X_test.shape)
    print('y_train shape:', y_test.shape) 

    # convert class vectors to binary class matrices
    Y_train = np_utils.to_categorical(y_train, nb_classes)
    Y_test = np_utils.to_categorical(y_test, nb_classes)

    model = vgg_like_model()

# this will do preprocessing and realtime data augmentation
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False) # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, Y_train,
                        batch_size=64, shuffle=True),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=1,
                        validation_data=(X_test, Y_test))

    model.save_weights("my_model_weights.h5")
